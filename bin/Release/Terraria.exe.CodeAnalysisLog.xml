<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\bin\Release\Terraria.exe">
   <Modules>
    <Module Name="terraria.exe">
     <Messages>
      <Message TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="WindowsLaunch.cs" Line="49">Mark the entry point method 'WindowsLaunch.Main(string[])' in assembly 'Terraria.exe' with an STAThreadAttribute.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Terraria">
       <Types>
        <Type Name="keyBoardInput" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TranslateMessage(System.IntPtr)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'keyBoardInput.TranslateMessage(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'keyBoardInput.TranslateMessage(IntPtr)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#newKeyEvent" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action&lt;char&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action&lt;char&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Main" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FindWindow(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.FindWindow(string, string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Main.FindWindow(string, string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpClassName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
            <Message Id="1" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'lpWindowName' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetKeyState(System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.GetKeyState(int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Main.GetKeyState(int)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMenuItemCount(System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.GetMenuItemCount(IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSystemMenu(System.IntPtr,System.Boolean)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.GetSystemMenu(IntPtr, bool)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadLibrary(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.LoadLibrary(string)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
            <Message TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="CriticalError">Change the accessibility of P/Invoke 'Main.LoadLibrary(string)' so that it is no longer visible from outside its assembly.</Issue>
            </Message>
            <Message Id="0" TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Name="ParameterImplicitAnsi" Certainty="75" Level="Error">To reduce security risk, marshal parameter 'dllToLoad' as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenLegacySettings()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Main.cs" Line="2605">Object 'binaryReader' can be disposed more than once in method 'Main.OpenLegacySettings()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2605</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Main.cs" Line="2605">Object 'fileStream' can be disposed more than once in method 'Main.OpenLegacySettings()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2605, 2606</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OpenRecent()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Main.cs" Line="2263">Object 'fileStream' can be disposed more than once in method 'Main.OpenRecent()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2263</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveMenu(System.IntPtr,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.RemoveMenu(IntPtr, int, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveRecent()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Main.cs" Line="2294">Object 'fileStream' can be disposed more than once in method 'Main.SaveRecent()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2294</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ShowWindow(System.IntPtr,System.Int32)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'Main.ShowWindow(IntPtr, int)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnEngineLoad" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnTick" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="MessageBuffer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'MessageBuffer' because it creates members of the following IDisposable types: 'MemoryStream', 'BinaryReader', 'BinaryWriter'. If 'MessageBuffer' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="NetMessage" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CompressTileBlock(System.Int32,System.Int32,System.Int16,System.Int16,System.Byte[],System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="NetMessage.cs" Line="1390">Object 'deflateStream' can be disposed more than once in method 'NetMessage.CompressTileBlock(int, int, short, short, byte[], int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1390, 1391</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="NetMessage.cs" Line="1409">Object 'memoryStream' can be disposed more than once in method 'NetMessage.CompressTileBlock(int, int, short, short, byte[], int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1409</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="NetMessage.cs" Line="1390">Object 'memoryStream2' can be disposed more than once in method 'NetMessage.CompressTileBlock(int, int, short, short, byte[], int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1390, 1391</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DecompressTileBlock(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="NetMessage.cs" Line="1689">Object 'deflateStream' can be disposed more than once in method 'NetMessage.DecompressTileBlock(byte[], int, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1689</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="NetMessage.cs" Line="1689">Object 'memoryStream' can be disposed more than once in method 'NetMessage.DecompressTileBlock(byte[], int, int)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1689, 1705</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Netplay" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnDisconnect" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Player" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadPlayer(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Player.cs" Line="33967">Object 'cryptoStream' can be disposed more than once in method 'Player.LoadPlayer(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33967</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Player.cs" Line="33967">Object 'memoryStream' can be disposed more than once in method 'Player.LoadPlayer(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33967, 33968</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SavePlayer(Terraria.IO.PlayerFileData,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Player.cs" Line="33500">Object 'cryptoStream' can be disposed more than once in method 'Player.SavePlayer(PlayerFileData, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33500</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Player.cs" Line="33500">Object 'stream' can be disposed more than once in method 'Player.SavePlayer(PlayerFileData, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33500</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria" File="Player.cs" Line="33500">Object 'stream' can be disposed more than once in method 'Player.SavePlayer(PlayerFileData, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 33500</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnEnterWorld" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action&lt;Player&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action&lt;Player&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Program" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#JitForcedMethodCache" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="CriticalError">Make 'Program.JitForcedMethodCache' private.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WindowsLaunch" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SetConsoleCtrlHandler(Terraria.WindowsLaunch+HandlerRoutine,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'WindowsLaunch.SetConsoleCtrlHandler(WindowsLaunch.HandlerRoutine, bool)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Achievements">
       <Types>
        <Type Name="Achievement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnCompleted" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Achievement.AchievementCompleted' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Achievement.AchievementCompleted' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AchievementCondition" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnComplete" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementCondition.AchievementUpdate' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementCondition.AchievementUpdate' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AchievementManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Load(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementManager.cs" Line="105">Object 'cryptoStream' can be disposed more than once in method 'AchievementManager.Load(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 105</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementManager.cs" Line="105">Object 'memoryStream' can be disposed more than once in method 'AchievementManager.Load(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 105, 106</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementManager.cs" Line="67">Object 'cryptoStream' can be disposed more than once in method 'AchievementManager.Save(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 67</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementManager.cs" Line="67">Object 'memoryStream' can be disposed more than once in method 'AchievementManager.Save(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 67, 68</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnAchievementCompleted" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Achievement.AchievementCompleted' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Achievement.AchievementCompleted' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AchievementTracker`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Terraria.Achievements.IAchievementTracker.Clear()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementTracker.cs" Line="39">Make 'AchievementTracker&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IAchievementTracker.Clear()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Achievements.IAchievementTracker.GetTrackerType()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementTracker.cs" Line="35">Make 'AchievementTracker&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IAchievementTracker.GetTrackerType()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Achievements.IAchievementTracker.ReportAs(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Achievements" File="AchievementTracker.cs" Line="31">Make 'AchievementTracker&lt;T&gt;' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'IAchievementTracker.ReportAs(string)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.DataStructures">
       <Types>
        <Type Name="CachedBuffer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'CachedBuffer' because it creates members of the following IDisposable types: 'MemoryStream', 'BinaryWriter', 'BinaryReader'. If 'CachedBuffer' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="TileEntity" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_UpdateEnd" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_UpdateStart" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TileObjectPreviewData" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Item[System.Int32,System.Int32]" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Item(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.DataStructures" File="TileObjectPreviewData.cs" Line="138">'TileObjectPreviewData.this.get(int, int)' creates an exception of type 'IndexOutOfRangeException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.GameContent.Achievements">
       <Types>
        <Type Name="AchievementsHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnItemCraft" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementsHelper.ItemCraftEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementsHelper.ItemCraftEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnItemPickup" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementsHelper.ItemPickupEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementsHelper.ItemPickupEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
             <Issue Name="TooMany" Certainty="95" Level="Error">Remove all but the first two parameters of 'AchievementsHelper.ItemPickupEvent'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnNPCKilled" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementsHelper.NPCKilledEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementsHelper.NPCKilledEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnProgressionEvent" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementsHelper.ProgressionEventEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementsHelper.ProgressionEventEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnTileDestroyed" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'AchievementsHelper.TileDestroyedEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'AchievementsHelper.TileDestroyedEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.GameContent.UI.Chat">
       <Types>
        <Type Name="PlainTagHandler" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Terraria.UI.Chat.ITagHandler.Parse(System.String,Microsoft.Xna.Framework.Color,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.GameContent.UI.Chat" File="PlainTagHandler.cs" Line="23">Make 'PlainTagHandler' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ITagHandler.Parse(string, Color, string)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.GameContent.UI.Elements">
       <Types>
        <Type Name="UIGenProgressBar" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.GameContent.UI.Elements" File="UIGenProgressBar.cs" Line="18">'UIGenProgressBar.UIGenProgressBar()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UIGenProgressBar..ctor()&#xD;&#xA;UIElement.Recalculate():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UIHeader" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.GameContent.UI.Elements" File="UIHeader.cs" Line="30">'UIHeader.UIHeader()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UIHeader..ctor()&#xD;&#xA;UIHeader.set_Text(String):Void&#xD;&#xA;UIElement.Recalculate():Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.GameContent.UI.Elements" File="UIHeader.cs" Line="34">'UIHeader.UIHeader(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UIHeader..ctor(String)&#xD;&#xA;UIHeader.set_Text(String):Void&#xD;&#xA;UIElement.Recalculate():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Graphics">
       <Types>
        <Type Name="TileBatch" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'TileBatch' because it creates members of the following IDisposable types: 'SpriteBatch', 'DynamicVertexBuffer', 'DynamicIndexBuffer'. If 'TileBatch' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Graphics.Capture">
       <Types>
        <Type Name="CaptureCamera" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
           <Issue Name="NonBreaking" Certainty="95" Level="CriticalError">Implement IDisposable on 'CaptureCamera' because it creates members of the following IDisposable types: 'SpriteBatch', 'RenderTarget2D'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#SaveImage(System.Int32,System.Int32,System.Drawing.Imaging.ImageFormat,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Graphics.Capture" File="CaptureCamera.cs" Line="214">Object 'bitmap' can be disposed more than once in method 'CaptureCamera.SaveImage(int, int, ImageFormat, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 214</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Graphics.Effects">
       <Types>
        <Type Name="MissingEffectException" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Messages>
          <Message TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add [Serializable] to 'MissingEffectException' as this type implements ISerializable.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.IO">
       <Types>
        <Type Name="Preferences" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Load()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="Preferences.cs" Line="61">Object 'fileStream' can be disposed more than once in method 'Preferences.Load()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 61</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="Preferences.cs" Line="117">Object 'fileStream' can be disposed more than once in method 'Preferences.Save(bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 117</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnLoad" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action&lt;Preferences&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action&lt;Preferences&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnSave" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action&lt;Preferences&gt;' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action&lt;Preferences&gt;' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WorldFile" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetAllMetadata(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2490">Object 'stream' can be disposed more than once in method 'WorldFile.GetAllMetadata(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2490</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2490">Object 'stream' can be disposed more than once in method 'WorldFile.GetAllMetadata(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2490</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFileMetadata(System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2542">Object 'stream' can be disposed more than once in method 'WorldFile.GetFileMetadata(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2542</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2542">Object 'stream' can be disposed more than once in method 'WorldFile.GetFileMetadata(string, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2542</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorldDifficulty(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2359">Object 'fileStream' can be disposed more than once in method 'WorldFile.GetWorldDifficulty(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2359</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetWorldName(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2314">Object 'binaryReader' can be disposed more than once in method 'WorldFile.GetWorldName(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2314</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="2314">Object 'fileStream' can be disposed more than once in method 'WorldFile.GetWorldName(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2314, 2315</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#loadWorld(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="169">Object 'binaryReader' can be disposed more than once in method 'WorldFile.loadWorld(bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 169, 175</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="104">Object 'memoryStream' can be disposed more than once in method 'WorldFile.loadWorld(bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 104, 169, 170, 175</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#saveWorld(System.Boolean,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="264">Object 'memoryStream' can be disposed more than once in method 'WorldFile.saveWorld(bool, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 264</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.IO" File="WorldFile.cs" Line="293">Object 'memoryStream2' can be disposed more than once in method 'WorldFile.saveWorld(bool, bool)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 293</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Map">
       <Types>
        <Type Name="MapHelper" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#SaveMap()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Map" File="MapHelper.cs" Line="2448">Object 'deflateStream' can be disposed more than once in method 'MapHelper.SaveMap()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2448</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Map" File="MapHelper.cs" Line="2448">Object 'memoryStream' can be disposed more than once in method 'MapHelper.SaveMap()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 2448, 2449, 2450</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WorldMap" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Load()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Map" File="WorldMap.cs" Line="126">Object 'memoryStream' can be disposed more than once in method 'WorldMap.Load()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 126</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Net.Sockets">
       <Types>
        <Type Name="SocialSocket" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Terraria.Net.Sockets.ISocket.AsyncReceive(System.Byte[],System.Int32,System.Int32,Terraria.Net.Sockets.SocketReceiveCallback,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="51">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.AsyncReceive(byte[], int, int, SocketReceiveCallback, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.AsyncSend(System.Byte[],System.Int32,System.Int32,Terraria.Net.Sockets.SocketSendCallback,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="37">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.AsyncSend(byte[], int, int, SocketSendCallback, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.Close()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="19">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.Close()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.Connect(Terraria.Net.RemoteAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="32">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.Connect(RemoteAddress)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.GetRemoteAddress()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="60">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.GetRemoteAddress()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.IsConnected()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="28">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.IsConnected()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.IsDataAvailable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="56">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.IsDataAvailable()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.StartListening(Terraria.Net.Sockets.SocketConnectionAccepted)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="64">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.StartListening(SocketConnectionAccepted)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.StopListening()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="SocialSocket.cs" Line="68">Make 'SocialSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.StopListening()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TcpSocket" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
           <Issue Name="DependsOnFix" Certainty="95" Level="CriticalError">Implement IDisposable on 'TcpSocket' because it creates members of the following IDisposable types: 'TcpClient'. If 'TcpSocket' has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Terraria.Net.Sockets.ISocket.AsyncReceive(System.Byte[],System.Int32,System.Int32,Terraria.Net.Sockets.SocketReceiveCallback,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="65">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.AsyncReceive(byte[], int, int, SocketReceiveCallback, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.AsyncSend(System.Byte[],System.Int32,System.Int32,Terraria.Net.Sockets.SocketSendCallback,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="61">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.AsyncSend(byte[], int, int, SocketSendCallback, object)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.Close()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="28">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.Close()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.Connect(Terraria.Net.RemoteAddress)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="37">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.Connect(RemoteAddress)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.GetRemoteAddress()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="73">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.GetRemoteAddress()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.IsConnected()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="33">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.IsConnected()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.IsDataAvailable()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="69">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.IsDataAvailable()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.StartListening(Terraria.Net.Sockets.SocketConnectionAccepted)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="77">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.StartListening(SocketConnectionAccepted)' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Terraria.Net.Sockets.ISocket.StopListening()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Net.Sockets" File="TcpSocket.cs" Line="102">Make 'TcpSocket' sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of 'ISocket.StopListening()' and is visible to derived classes.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Server">
       <Types>
        <Type Name="Game" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Dispose()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="DisposeImplementation" Certainty="95" Level="Error" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Server" File="Game.cs" Line="114">Modify 'Game.Dispose()' so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Social.Steam">
       <Types>
        <Type Name="CoreSocialModule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnTick" Kind="Event" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'Action' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'Action' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetServerSocialModule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#BroadcastConnectedUsers()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Social.Steam" File="NetServerSocialModule.cs" Line="35">Object 'memoryStream' can be disposed more than once in method 'NetServerSocialModule.BroadcastConnectedUsers()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 35</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NetSocialModule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnLobbyChatMessage(Steamworks.LobbyChatMsg_t)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.Social.Steam" File="NetSocialModule.cs" Line="114">Object 'memoryStream' can be disposed more than once in method 'NetSocialModule.OnLobbyChatMessage(LobbyChatMsg_t)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 114</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.UI">
       <Types>
        <Type Name="UIElement" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OnClick" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnDoubleClick" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnMouseDown" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnMouseOut" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnMouseOver" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnMouseUp" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.MouseEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.MouseEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OnScrollWheel" Kind="Event" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Name="First" Certainty="95" Level="Error">Declare the first parameter of 'UIElement.ScrollWheelEvent' as an object named 'sender'.</Issue>
             <Issue Name="Second" Certainty="95" Level="Error">Declare the second parameter of 'UIElement.ScrollWheelEvent' as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UIState" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="C:\Users\charlesbgknight\Desktop\Terraria Mod\MEFBEA\mefbaea\Terraria.UI" File="UIState.cs" Line="6">'UIState.UIState()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;UIState..ctor()&#xD;&#xA;UIElement.Recalculate():Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Terraria.Utilities">
       <Types>
        <Type Name="CrashDump" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#MiniDumpWriteDump(System.IntPtr,System.Int32,System.IntPtr,Terraria.Utilities.CrashDump+MINIDUMP_TYPE,System.IntPtr,System.IntPtr,System.IntPtr)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'CrashDump.MiniDumpWriteDump(IntPtr, int, IntPtr, CrashDump.MINIDUMP_TYPE, IntPtr, IntPtr, IntPtr)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileOperationAPIWrapper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#SHFileOperation(Terraria.Utilities.FileOperationAPIWrapper+SHFILEOPSTRUCT&amp;)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060" Status="Active" Created="2015-09-11 12:22:45Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalWarning">Because it is a P/Invoke method, 'FileOperationAPIWrapper.SHFileOperation(ref FileOperationAPIWrapper.SHFILEOPSTRUCT)' should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="DeclareEventHandlersCorrectly" Category="Microsoft.Design" CheckId="CA1009">
   <Name>Declare event handlers correctly</Name>
   <Description>By convention, .NET events have two parameters that specify the event sender and event data. Event handler signatures should follow this form: void MyEventHandler(object sender, EventArgs e). The 'sender' parameter is always of type System.Object, even if it is possible to employ a more specific type. The 'e' parameter is always of type System.EventArgs. Events that do not provide event data should use the System.EventHandler delegate type. Event handlers return void so that they can send each event to multiple target methods. Any value returned by a target would be lost after the first call.</Description>
   <Resolution Name="First">Declare the first parameter of {0} as an object named 'sender'.</Resolution>
   <Resolution Name="Second">Declare the second parameter of {0} as an EventArgs, or an instance of a type that extends EventArgs, named 'e'.</Resolution>
   <Resolution Name="TooMany">Remove all but the first two parameters of {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182133.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 105</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementIDisposableCorrectly" Category="Microsoft.Design" CheckId="CA1063">
   <Name>Implement IDisposable correctly</Name>
   <Description>All IDisposable types should implement the Dispose pattern correctly.</Description>
   <Resolution Name="DisposeImplementation">Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms244737.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="InterfaceMethodsShouldBeCallableByChildTypes" Category="Microsoft.Design" CheckId="CA1033">
   <Name>Interface methods should be callable by child types</Name>
   <Description>Explicit method implementations are defined with private accessibility. Classes that derive from classes with explicit method implementations and choose to re-declare them on the class will not be able to call into the base class implementation unless the base class has provided an alternate method with appropriate accessibility. When overriding a base class method that has been hidden by explicit interface implementation, in order to call into the base class implementation, a derived class must cast the base pointer to the relevant interface. When calling through this reference, however, the derived class implementation will actually be invoked, resulting in recursion and an eventual stack overflow.</Description>
   <Resolution Name="Default">Make {0} sealed (a breaking change if this class has previously shipped), implement the method non-explicitly, or implement a new method that exposes the functionality of {1} and is visible to derived classes.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182153.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkISerializableTypesWithSerializable" Category="Microsoft.Usage" CheckId="CA2237">
   <Name>Mark ISerializable types with SerializableAttribute</Name>
   <Description>The System.Runtime.Serialization.ISerializable interface allows the type to customize its serialization, while the Serializable attribute enables the runtime to recognize the type as being serializable.</Description>
   <Resolution Name="Default">Add [Serializable] to {0} as this type implements ISerializable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182350.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkWindowsFormsEntryPointsWithStaThread" Category="Microsoft.Usage" CheckId="CA2232">
   <Name>Mark Windows Forms entry points with STAThread</Name>
   <Description>Assemblies that reference System.Windows.Forms should have the STAThreadAttribute. Failure to apply this attribute will most likely result in an application that does not work. Windows Forms relies on a number of components that use the STA model.</Description>
   <Resolution Name="Default">Mark the entry point method {0} in assembly {1} with an STAThreadAttribute.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182351.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MovePInvokesToNativeMethodsClass" Category="Microsoft.Design" CheckId="CA1060">
   <Name>Move P/Invokes to NativeMethods class</Name>
   <Description>This type contains members with the DllImport attribute. Members with the DllImport attribute should be contained in classes named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Description>
   <Resolution Name="Default">Because it is a P/Invoke method, {0} should be defined in a class named NativeMethods, SafeNativeMethods, or UnsafeNativeMethods.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182161.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PInvokesShouldNotBeVisible" Category="Microsoft.Interoperability" CheckId="CA1401">
   <Name>P/Invokes should not be visible</Name>
   <Description>Interop layer should not be public. The DllImport attribute should not be applied to publicly accessible members (public or protected).</Description>
   <Resolution Name="Default">Change the accessibility of P/Invoke {0} so that it is no longer visible from outside its assembly.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182209.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">CriticalError</MessageLevel>
   <File Name="interoperabilityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="PointersShouldNotBeVisible" Category="Microsoft.Security" CheckId="CA2111">
   <Name>Pointers should not be visible</Name>
   <Description>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</Description>
   <Resolution Name="Default">Make {0} private.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182306.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMarshalingForPInvokeStringArguments" Category="Microsoft.Globalization" CheckId="CA2101">
   <Name>Specify marshaling for P/Invoke string arguments</Name>
   <Description>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</Description>
   <Resolution Name="ParameterImplicitAnsi">To reduce security risk, marshal parameter {0} as Unicode, by setting DllImport.CharSet to CharSet.Unicode, or by explicitly marshaling the parameter as UnmanagedType.LPWStr. If you need to marshal this string as ANSI or system-dependent, specify MarshalAs explicitly, and set BestFitMapping=false; for added security, also set ThrowOnUnmappableChar=true.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182319.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="TypesThatOwnDisposableFieldsShouldBeDisposable" Category="Microsoft.Design" CheckId="CA1001">
   <Name>Types that own disposable fields should be disposable</Name>
   <Description>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</Description>
   <Resolution Name="DependsOnFix">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}. If {0} has previously shipped, adding new members that implement IDisposable to this type is considered a breaking change to existing consumers.</Resolution>
   <Resolution Name="NonBreaking">Implement IDisposable on {0} because it creates members of the following IDisposable types: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182172.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
